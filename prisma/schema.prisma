// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Client {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  phone           String?
  billing_address String?
  notes           String?
  image_url       String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  invoices        Invoice[]

  @@map("clients")
}

model Invoice {
  id             String        @id @default(cuid())
  client_id      String
  invoice_number String        @unique
  issue_date     DateTime
  due_date       DateTime?
  total_amount   Float         @default(0)
  status         InvoiceStatus @default(DRAFT)
  notes          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  sent_date      DateTime?
  paid_date      DateTime?
  items          InvoiceItem[]
  client         Client        @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model InvoiceItem {
  id                String       @id @default(cuid())
  invoice_id        String
  description       String
  quantity          Float
  unit_price        Float
  total_price       Float
  rate              Float?
  total             Float?
  agency_commission Float        @default(0)
  business_area     BusinessArea @default(CREATIVE)
  created_at        DateTime     @default(now())
  updated_at        DateTime?
  invoice           Invoice      @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Expense {
  id            String   @id @default(cuid())
  description   String
  amount        Float
  category      String
  date          DateTime
  receipt_url   String?
  notes         String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("expenses")
}

/// Bank statement CSV imports and parsed transactions
model BankStatementImport {
  id           String            @id @default(cuid())
  filename     String?
  uploaded_at  DateTime          @default(now())
  transactions BankTransaction[]

  @@map("bank_statement_imports")
}

model BankTransaction {
  id          String              @id @default(cuid())
  import_id   String
  date        DateTime
  description String
  amount      Float
  raw         Json?
  status      TransactionStatus   @default(PENDING)
  expense_id  String?
  import      BankStatementImport @relation(fields: [import_id], references: [id], onDelete: Cascade)

  @@map("bank_transactions")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum BusinessArea {
  CREATIVE
  DEVELOPMENT
  SUPPORT
}

enum TransactionStatus {
  PENDING
  ADDED
  IGNORED
}
